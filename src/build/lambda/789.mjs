export const __webpack_id__=789;export const __webpack_ids__=[789];export const __webpack_modules__={2789:(e,n,r)=>{r.d(n,{fromIni:()=>_});var o=r(2792),t=r(8112),i=r(244);const s=e=>(0,i.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),a=e=>!e.role_arn&&!!e.credential_source,l=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,c=async(e,n)=>{n?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const r={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,i.g)(r,"CREDENTIALS_PROFILE","n")},d=async(e,n,_,g={},f=!1)=>{const u=n[e];if(Object.keys(g).length>0&&l(u))return c(u,_);if(f||((e,{profile:n="default",logger:r}={})=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(((e,{profile:n,logger:r})=>{const o="string"==typeof e.source_profile&&void 0===e.credential_source;return o&&r?.debug?.(`    ${n} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),o})(e,{profile:n,logger:r})||((e,{profile:n,logger:r})=>{const o="string"==typeof e.credential_source&&void 0===e.source_profile;return o&&r?.debug?.(`    ${n} isCredentialSourceProfile credential_source=${e.credential_source}`),o})(e,{profile:n,logger:r})))(u,{profile:e,logger:_.logger}))return(async(e,n,l,c={})=>{l.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const _=n[e],{source_profile:g,region:f}=_;if(!l.roleAssumer){const{getDefaultRoleAssumer:e}=await r.e(134).then(r.bind(r,134));l.roleAssumer=e({...l.clientConfig,credentialProviderLogger:l.logger,parentClientConfig:{...l?.parentClientConfig,region:f??l?.parentClientConfig?.region}},l.clientPlugins)}if(g&&g in c)throw new t.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,o.Bz)(l)}. Profiles visited: `+Object.keys(c).join(", "),{logger:l.logger});l.logger?.debug("@aws-sdk/credential-provider-ini - finding credential resolver using "+(g?`source_profile=[${g}]`:`profile=[${e}]`));const u=g?d(g,n,l,{...c,[g]:!0},a(n[g]??{})):(await((e,n,o)=>{const i={EcsContainer:async e=>{const{fromHttp:n}=await r.e(610).then(r.bind(r,3610)),{fromContainerMetadata:i}=await r.e(897).then(r.bind(r,7897));return o?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,t.cy)(n(e??{}),i(e))().then(s)},Ec2InstanceMetadata:async e=>{o?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:n}=await r.e(897).then(r.bind(r,7897));return async()=>n(e)().then(s)},Environment:async e=>{o?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:n}=await Promise.resolve().then(r.bind(r,904));return async()=>n(e)().then(s)}};if(e in i)return i[e];throw new t.C1(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:o})})(_.credential_source,e,l.logger)(l))();if(a(_))return u.then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")));{const n={RoleArn:_.role_arn,RoleSessionName:_.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:_.external_id,DurationSeconds:parseInt(_.duration_seconds||"3600",10)},{mfa_serial:r}=_;if(r){if(!l.mfaCodeProvider)throw new t.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:l.logger,tryNextLink:!1});n.SerialNumber=r,n.TokenCode=await l.mfaCodeProvider(r)}const o=await u;return l.roleAssumer(o,n).then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")))}})(e,n,_,g);if(l(u))return c(u,_);if(p=u,Boolean(p)&&"object"==typeof p&&"string"==typeof p.web_identity_token_file&&"string"==typeof p.role_arn&&["undefined","string"].indexOf(typeof p.role_session_name)>-1)return(async(e,n)=>r.e(819).then(r.bind(r,7819)).then((({fromTokenFile:r})=>r({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))))))(u,_);var p;if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(u))return(async(e,n)=>r.e(109).then(r.bind(r,5109)).then((({fromProcess:r})=>r({...e,profile:n})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_PROCESS","v"))))))(_,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(u))return await(async(e,n,o={})=>{const{fromSSO:t}=await r.e(791).then(r.bind(r,9791));return t({profile:e,logger:o.logger,parentClientConfig:o.parentClientConfig,clientConfig:o.clientConfig})().then((e=>n.sso_session?(0,i.g)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,i.g)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t")))})(e,u,_);throw new t.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:_.logger})},_=(e={})=>async({callerClientConfig:n}={})=>{const r={...e,parentClientConfig:{...n,...e.parentClientConfig}};r.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await(0,o.YU)(r);return d((0,o.Bz)({profile:e.profile??n?.profile}),t,r)}}};