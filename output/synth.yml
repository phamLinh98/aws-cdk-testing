Resources:
  ExistingLinhclassCsvBucketNotificationsB62FD1F8:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName: linhclass-csv-bucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .csv
            LambdaFunctionArn:
              Fn::GetAtt:
                - getBatchIdUpdateStatusUploadedLambdaE000F12D
                - Arn
      Managed: false
      SkipDestinationValidation: false
    DependsOn:
      - ExistingLinhclassCsvBucketAllowBucketNotificationsToServerlessApiStackgetBatchIdUpdateStatusUploadedLambdaCCCE8660D3F8E382
    Metadata:
      aws:cdk:path: ServerlessApiStack/ExistingLinhclassCsvBucket/Notifications/Resource
  ExistingLinhclassCsvBucketAllowBucketNotificationsToServerlessApiStackgetBatchIdUpdateStatusUploadedLambdaCCCE8660D3F8E382:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - getBatchIdUpdateStatusUploadedLambdaE000F12D
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "650251698778"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - :s3:::linhclass-csv-bucket
    Metadata:
      aws:cdk:path: ServerlessApiStack/ExistingLinhclassCsvBucket/AllowBucketNotificationsToServerlessApiStackgetBatchIdUpdateStatusUploadedLambdaCCCE8660
  UploadCsvTable52026CEB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: upload-csv
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/UploadCsvTable/Resource
  UsersTable9725E9C8:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: Users
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/UsersTable/Resource
  LinhclassLambdaFullAccessRole87C45995:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonDynamoDBFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSQSFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/SecretsManagerReadWrite
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:PutItem
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: AdditionalDynamoDBPermissions
      RoleName: linhclass-lambda-full-access-role-ServerlessApiStack
    Metadata:
      aws:cdk:path: ServerlessApiStack/LinhclassLambdaFullAccessRole/Resource
  LinhclassLambdaFullAccessRoleDefaultPolicy151A0983:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - linhclassLambdaCallQueueA1F3DECD
                - Arn
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::linhclass-csv-bucket
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::linhclass-csv-bucket/*
          - Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - linhclassLambdaCallQueueA1F3DECD
                - Arn
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UploadCsvTable52026CEB
                  - Arn
              - Ref: AWS::NoValue
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UsersTable9725E9C8
                  - Arn
              - Ref: AWS::NoValue
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :secretsmanager:ap-northeast-1:650251698778:secret:HitoEnvSecret-??????
        Version: "2012-10-17"
      PolicyName: LinhclassLambdaFullAccessRoleDefaultPolicy151A0983
      Roles:
        - Ref: LinhclassLambdaFullAccessRole87C45995
    Metadata:
      aws:cdk:path: ServerlessApiStack/LinhclassLambdaFullAccessRole/DefaultPolicy/Resource
  getUrlUpdateLambda4C6CC445:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: 6092f75bbc52535a1a3a5322371591d616bd083684c4a3c4c6071189b8e2278e.zip
      FunctionName: create-preurl-s3-update-status-uploading-lambda
      Handler: create-preurl-s3-update-status-uploading-lambda.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LinhclassLambdaFullAccessRole87C45995
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - LinhclassLambdaFullAccessRoleDefaultPolicy151A0983
      - LinhclassLambdaFullAccessRole87C45995
    Metadata:
      aws:cdk:path: ServerlessApiStack/getUrlUpdateLambda/Resource
      aws:asset:path: asset.6092f75bbc52535a1a3a5322371591d616bd083684c4a3c4c6071189b8e2278e
      aws:asset:is-bundled: false
      aws:asset:property: Code
  getUploadStatusLambdaD9995D19:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: 8333447034dc33d685fd735f9e2bdd389bc821cac28983fed2f7540d1a0d2bb8.zip
      FunctionName: get-status-from-dynamodb-lambda
      Handler: get-status-from-dynamodb-lambda.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LinhclassLambdaFullAccessRole87C45995
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - LinhclassLambdaFullAccessRoleDefaultPolicy151A0983
      - LinhclassLambdaFullAccessRole87C45995
    Metadata:
      aws:cdk:path: ServerlessApiStack/getUploadStatusLambda/Resource
      aws:asset:path: asset.8333447034dc33d685fd735f9e2bdd389bc821cac28983fed2f7540d1a0d2bb8
      aws:asset:is-bundled: false
      aws:asset:property: Code
  getBatchIdUpdateStatusUploadedLambdaE000F12D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: 705a1a23e784fdb6d55ba6f7b21b646460b5a66257a4f00ec4a8ffb1e3be79d4.zip
      FunctionName: get-batchid-update-status-to-uploaded-lambda
      Handler: get-batchid-update-status-to-uploaded.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LinhclassLambdaFullAccessRole87C45995
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - LinhclassLambdaFullAccessRoleDefaultPolicy151A0983
      - LinhclassLambdaFullAccessRole87C45995
    Metadata:
      aws:cdk:path: ServerlessApiStack/getBatchIdUpdateStatusUploadedLambda/Resource
      aws:asset:path: asset.705a1a23e784fdb6d55ba6f7b21b646460b5a66257a4f00ec4a8ffb1e3be79d4
      aws:asset:is-bundled: false
      aws:asset:property: Code
  getCsvReadContentAndInProcessingLambdaDCB315DE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: fbd977ee16227bc1b9c109737b7d304f2b7cec1010ba4ca5ad34c8e5cf9b6a5d.zip
      FunctionName: get-csv-read-detail-update-inprocessing-lambda
      Handler: get-csv-read-detail-update-inprocessing-lambda.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LinhclassLambdaFullAccessRole87C45995
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - LinhclassLambdaFullAccessRoleDefaultPolicy151A0983
      - LinhclassLambdaFullAccessRole87C45995
    Metadata:
      aws:cdk:path: ServerlessApiStack/getCsvReadContentAndInProcessingLambda/Resource
      aws:asset:path: asset.fbd977ee16227bc1b9c109737b7d304f2b7cec1010ba4ca5ad34c8e5cf9b6a5d
      aws:asset:is-bundled: false
      aws:asset:property: Code
  getCsvReadContentAndInProcessingLambdaSqsEventSourceServerlessApiStacklinhclassLambdaCallQueueFA7112418812F77A:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
          - linhclassLambdaCallQueueA1F3DECD
          - Arn
      FunctionName:
        Ref: getCsvReadContentAndInProcessingLambdaDCB315DE
    Metadata:
      aws:cdk:path: ServerlessApiStack/getCsvReadContentAndInProcessingLambda/SqsEventSource:ServerlessApiStacklinhclassLambdaCallQueueFA711241/Resource
  linhclassLambdaCallQueueA1F3DECD:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: linhclass-lambda-call-to-queue
      VisibilityTimeout: 30
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclassLambdaCallQueue/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ServerlessApiStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
          - Action: s3:GetBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ServerlessApiStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              sorted_notifications = sort_filter_rules(n)
              strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))

          def sort_filter_rules(json_obj):
            if not isinstance(json_obj, dict):
                return json_obj
            for key, value in json_obj.items():
                if isinstance(value, dict):
                    json_obj[key] = sort_filter_rules(value)
                elif isinstance(value, list):
                    json_obj[key] = [sort_filter_rules(item) for item in value]
            if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
                filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
                sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
                json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
            return json_obj
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ServerlessApiStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  linhclassDE87714D:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: linhclass
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Resource
  linhclassCloudWatchRole1C82C072:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/CloudWatchRole/Resource
  linhclassAccountDB4488BD:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - linhclassCloudWatchRole1C82C072
          - Arn
    DependsOn:
      - linhclassDE87714D
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Account
  linhclassDeploymentBB05A3E1f58af101550b8fe02d8cddcdcae7cfbd:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId:
        Ref: linhclassDE87714D
    DependsOn:
      - linhclassgetstatusGETC97FEE9B
      - linhclassgetstatusOPTIONSBBD16E13
      - linhclassgetstatus8E3BCEEB
      - linhclassgeturlGET1F6CC5D4
      - linhclassgeturlOPTIONS423C7C1C
      - linhclassgeturlEBD94850
      - linhclassOPTIONSEA2370CC
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Deployment/Resource
  linhclassDeploymentStageprodA116D990:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: linhclassDeploymentBB05A3E1f58af101550b8fe02d8cddcdcae7cfbd
      RestApiId:
        Ref: linhclassDE87714D
      StageName: prod
    DependsOn:
      - linhclassAccountDB4488BD
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/DeploymentStage.prod/Resource
  linhclassOPTIONSEA2370CC:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5173'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Fn::GetAtt:
          - linhclassDE87714D
          - RootResourceId
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/OPTIONS/Resource
  linhclassgeturlEBD94850:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - linhclassDE87714D
          - RootResourceId
      PathPart: get-url
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-url/Resource
  linhclassgeturlOPTIONS423C7C1C:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5173'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: linhclassgeturlEBD94850
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-url/OPTIONS/Resource
  linhclassgeturlGETApiPermissionServerlessApiStacklinhclass023C3CBCGETgeturlAEC016A1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - getUrlUpdateLambda4C6CC445
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: linhclassDE87714D
            - /
            - Ref: linhclassDeploymentStageprodA116D990
            - /GET/get-url
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-url/GET/ApiPermission.ServerlessApiStacklinhclass023C3CBC.GET..get-url
  linhclassgeturlGETApiPermissionTestServerlessApiStacklinhclass023C3CBCGETgeturl88827404:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - getUrlUpdateLambda4C6CC445
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: linhclassDE87714D
            - /test-invoke-stage/GET/get-url
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-url/GET/ApiPermission.Test.ServerlessApiStacklinhclass023C3CBC.GET..get-url
  linhclassgeturlGET1F6CC5D4:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - getUrlUpdateLambda4C6CC445
                  - Arn
              - /invocations
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
      ResourceId:
        Ref: linhclassgeturlEBD94850
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-url/GET/Resource
  linhclassgetstatus8E3BCEEB:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - linhclassDE87714D
          - RootResourceId
      PathPart: get-status
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-status/Resource
  linhclassgetstatusOPTIONSBBD16E13:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5173'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: linhclassgetstatus8E3BCEEB
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-status/OPTIONS/Resource
  linhclassgetstatusGETApiPermissionServerlessApiStacklinhclass023C3CBCGETgetstatus58F092D2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - getUploadStatusLambdaD9995D19
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: linhclassDE87714D
            - /
            - Ref: linhclassDeploymentStageprodA116D990
            - /GET/get-status
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-status/GET/ApiPermission.ServerlessApiStacklinhclass023C3CBC.GET..get-status
  linhclassgetstatusGETApiPermissionTestServerlessApiStacklinhclass023C3CBCGETgetstatusFA8A01F1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - getUploadStatusLambdaD9995D19
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: linhclassDE87714D
            - /test-invoke-stage/GET/get-status
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-status/GET/ApiPermission.Test.ServerlessApiStacklinhclass023C3CBC.GET..get-status
  linhclassgetstatusGETC97FEE9B:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - getUploadStatusLambdaD9995D19
                  - Arn
              - /invocations
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
      ResourceId:
        Ref: linhclassgetstatus8E3BCEEB
      RestApiId:
        Ref: linhclassDE87714D
    Metadata:
      aws:cdk:path: ServerlessApiStack/linhclass/Default/get-status/GET/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2WQzW7CMBCEn4W72fLTS49A2xsqDb2jjbMEQ2Kn7BoUWX73yg6lSD3Nt7P22JoZTF8mMBnhlce6Oo0bU0LYCuqTKoidP2tSeOVd4DksvT6RLJFJNdiWFUJY7e2Gzq1hNs6qd2+1JFjt7Z3fLmRlm5PW2HXG1mn9342q6i22riohfGHZUDqWISqDLYTCDV7WjWuM7tM4UFQ83yEzCcMiieJvhvDpyedLGaLCztQodMUeQkEsi87kyD9caO28FfVKXeP6lqwk92HaCtY5coDflnIta5KDq9LyRvcOh0cyx/g4qfzblHVr5sNL5yUq6yqCIz9dZjOYPsNkdGRjxmdvxbQExaA/vul2378BAAA=
    Metadata:
      aws:cdk:path: ServerlessApiStack/CDKMetadata/Default
Outputs:
  linhclassEndpointAD872134:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: linhclassDE87714D
          - .execute-api.ap-northeast-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: linhclassDeploymentStageprodA116D990
          - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

