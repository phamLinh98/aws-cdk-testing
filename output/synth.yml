Resources:
  UserTableBD4BF69E:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: user
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/UserTable/Resource
  UploadTable4AFD581F:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: upload-status
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/UploadTable/Resource
  GetUserFnServiceRoleFC2429D1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUserFn/ServiceRole/Resource
  GetUserFnServiceRoleDefaultPolicyC8125AD0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UserTableBD4BF69E
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: GetUserFnServiceRoleDefaultPolicyC8125AD0
      Roles:
        - Ref: GetUserFnServiceRoleFC2429D1
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUserFn/ServiceRole/DefaultPolicy/Resource
  GetUserFn2C6EE015:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: e0ceca893899f5edd718b018ee3765790bfdda6746435e79bd39312098fc77bd.zip
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserTableBD4BF69E
      FunctionName: get-user
      Handler: get-user.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - GetUserFnServiceRoleFC2429D1
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - GetUserFnServiceRoleDefaultPolicyC8125AD0
      - GetUserFnServiceRoleFC2429D1
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUserFn/Resource
      aws:asset:path: asset.e0ceca893899f5edd718b018ee3765790bfdda6746435e79bd39312098fc77bd
      aws:asset:is-bundled: false
      aws:asset:property: Code
  GetUploadStatusFnServiceRole014082E7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUploadStatusFn/ServiceRole/Resource
  GetUploadStatusFnServiceRoleDefaultPolicyCACDE014:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UploadTable4AFD581F
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: GetUploadStatusFnServiceRoleDefaultPolicyCACDE014
      Roles:
        - Ref: GetUploadStatusFnServiceRole014082E7
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUploadStatusFn/ServiceRole/DefaultPolicy/Resource
  GetUploadStatusFnFAB3BE99:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-650251698778-ap-northeast-1
        S3Key: e0ceca893899f5edd718b018ee3765790bfdda6746435e79bd39312098fc77bd.zip
      Environment:
        Variables:
          UPLOAD_TABLE:
            Ref: UploadTable4AFD581F
      FunctionName: get-upload-status
      Handler: get-upload-status.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - GetUploadStatusFnServiceRole014082E7
          - Arn
      Runtime: nodejs18.x
      Timeout: 5
    DependsOn:
      - GetUploadStatusFnServiceRoleDefaultPolicyCACDE014
      - GetUploadStatusFnServiceRole014082E7
    Metadata:
      aws:cdk:path: ServerlessApiStack/GetUploadStatusFn/Resource
      aws:asset:path: asset.e0ceca893899f5edd718b018ee3765790bfdda6746435e79bd39312098fc77bd
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ServerlessApi21071D75:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ServerlessDemoApi
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Resource
  ServerlessApiCloudWatchRole38056DF6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/CloudWatchRole/Resource
  ServerlessApiAccount46D9C997:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - ServerlessApiCloudWatchRole38056DF6
          - Arn
    DependsOn:
      - ServerlessApi21071D75
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Account
  ServerlessApiDeployment5B47D3B0d910f87ff1839df267133771b9b6ea9d:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId:
        Ref: ServerlessApi21071D75
    DependsOn:
      - ServerlessApiOPTIONSA9BEED91
      - ServerlessApiuploadstatusidGET896722FA
      - ServerlessApiuploadstatusidOPTIONS0FC7F31D
      - ServerlessApiuploadstatusidC9EC3E4F
      - ServerlessApiuploadstatusOPTIONS834DEFFC
      - ServerlessApiuploadstatus5E404C22
      - ServerlessApiuseridGET7F91A437
      - ServerlessApiuseridOPTIONSA22DB815
      - ServerlessApiuserid294AE689
      - ServerlessApiuserOPTIONS9C8D4D56
      - ServerlessApiuser36B29166
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Deployment/Resource
  ServerlessApiDeploymentStageprodCF80C7AD:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ServerlessApiDeployment5B47D3B0d910f87ff1839df267133771b9b6ea9d
      RestApiId:
        Ref: ServerlessApi21071D75
      StageName: prod
    DependsOn:
      - ServerlessApiAccount46D9C997
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/DeploymentStage.prod/Resource
  ServerlessApiOPTIONSA9BEED91:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Fn::GetAtt:
          - ServerlessApi21071D75
          - RootResourceId
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/OPTIONS/Resource
  ServerlessApiuser36B29166:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ServerlessApi21071D75
          - RootResourceId
      PathPart: user
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/Resource
  ServerlessApiuserOPTIONS9C8D4D56:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ServerlessApiuser36B29166
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/OPTIONS/Resource
  ServerlessApiuserid294AE689:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ServerlessApiuser36B29166
      PathPart: "{id}"
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/{id}/Resource
  ServerlessApiuseridOPTIONSA22DB815:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ServerlessApiuserid294AE689
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/{id}/OPTIONS/Resource
  ServerlessApiuseridGETApiPermissionServerlessApiStackServerlessApi6A97A36DGETuserid6472CE54:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetUserFn2C6EE015
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: ServerlessApi21071D75
            - /
            - Ref: ServerlessApiDeploymentStageprodCF80C7AD
            - /GET/user/*
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/{id}/GET/ApiPermission.ServerlessApiStackServerlessApi6A97A36D.GET..user.{id}
  ServerlessApiuseridGETApiPermissionTestServerlessApiStackServerlessApi6A97A36DGETuseridB28F06D0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetUserFn2C6EE015
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: ServerlessApi21071D75
            - /test-invoke-stage/GET/user/*
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/{id}/GET/ApiPermission.Test.ServerlessApiStackServerlessApi6A97A36D.GET..user.{id}
  ServerlessApiuseridGET7F91A437:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetUserFn2C6EE015
                  - Arn
              - /invocations
      ResourceId:
        Ref: ServerlessApiuserid294AE689
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/user/{id}/GET/Resource
  ServerlessApiuploadstatus5E404C22:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ServerlessApi21071D75
          - RootResourceId
      PathPart: upload-status
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/Resource
  ServerlessApiuploadstatusOPTIONS834DEFFC:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ServerlessApiuploadstatus5E404C22
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/OPTIONS/Resource
  ServerlessApiuploadstatusidC9EC3E4F:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ServerlessApiuploadstatus5E404C22
      PathPart: "{id}"
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/{id}/Resource
  ServerlessApiuploadstatusidOPTIONS0FC7F31D:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ServerlessApiuploadstatusidC9EC3E4F
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/{id}/OPTIONS/Resource
  ServerlessApiuploadstatusidGETApiPermissionServerlessApiStackServerlessApi6A97A36DGETuploadstatusidB5447BC0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetUploadStatusFnFAB3BE99
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: ServerlessApi21071D75
            - /
            - Ref: ServerlessApiDeploymentStageprodCF80C7AD
            - /GET/upload-status/*
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/{id}/GET/ApiPermission.ServerlessApiStackServerlessApi6A97A36D.GET..upload-status.{id}
  ServerlessApiuploadstatusidGETApiPermissionTestServerlessApiStackServerlessApi6A97A36DGETuploadstatusid5448D1A7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetUploadStatusFnFAB3BE99
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:ap-northeast-1:650251698778:"
            - Ref: ServerlessApi21071D75
            - /test-invoke-stage/GET/upload-status/*
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/{id}/GET/ApiPermission.Test.ServerlessApiStackServerlessApi6A97A36D.GET..upload-status.{id}
  ServerlessApiuploadstatusidGET896722FA:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetUploadStatusFnFAB3BE99
                  - Arn
              - /invocations
      ResourceId:
        Ref: ServerlessApiuploadstatusidC9EC3E4F
      RestApiId:
        Ref: ServerlessApi21071D75
    Metadata:
      aws:cdk:path: ServerlessApiStack/ServerlessApi/Default/upload-status/{id}/GET/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/02OQW+DMAyFf0vvwaN0lx3ppt2mVXT3yiQeS4EEYWcIofz3idCpPb3PfvazC9i/5JDvcOJMmzbrbA3LWVC3Cie+LGZ22HtTw/KFdUfq9dsliKrDvjYIy3twWqx3q/XIJxp7y2y9i8piD0vlt/2kJ99ZPae5RFHx4YLMJAzlKooPcAy6JTkik8LBNig04QxLRSzlYFPWHUutfXCi3mjo/NyTk7X7UJ0Fm/TABhWxD6OmFP9B8uPNat7o370dSRzjvZ1+XIOsa9aZzyBDkKicNwRXfvotCtg/Q767srXZGJzYnqDa9A9HqLZHdQEAAA==
    Metadata:
      aws:cdk:path: ServerlessApiStack/CDKMetadata/Default
Outputs:
  ServerlessApiEndpoint39E2F4FD:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: ServerlessApi21071D75
          - .execute-api.ap-northeast-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: ServerlessApiDeploymentStageprodCF80C7AD
          - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

